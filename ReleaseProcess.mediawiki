[wiki:ContributingToTwistedLabs Contribute] > [wiki:TwistedDevelopment Development] > Release Process

[[PageOutline(1-3,, inline)]]

This document describes the Twisted release process. Although it is still incomplete, every effort has been made to ensure that it is accurate and up-to-date. There are plans to eventually move this document into the source tree (#4543).

This process has only been tested on Linux or OS X, so we recommend that you do the release on Linux or OS X.

{{{
#!html
<b style="color: red">
Thinking about editing this document?  DON'T.  The only time changes to this document are allowed is during a release.  The only changes that may be made are changes that are tested by the release engineer and found to actually work.
</b>
}}}

If you want to make other changes to the release process, follow the normal Twisted development process (contribute release automation software that has documentation and unit tests demonstrating that it works).

= Outcomes =

By the end of a Twisted release we'll have:
 * Tarballs for Twisted as a whole, and for each of its sub-projects
 * Windows installers for the whole Twisted project
 * Updated documentation (API & howtos) on the twistedmatrix.com site
 * Updated documentation on Read The Docs
 * Updated download links on the twistedmatrix.com site
 * Announcement emails sent to major Python lists
 * Announcement post on http://labs.twistedmatrix.com
 * A tag in our Subversion repository marking the release

= Prerequisites =

To release Twisted, you will need:
 * Commit privileges to Twisted
 * Access to dornkirk.twistedmatrix.com as t-web
 * Permissions to edit the Downloads wiki page
 * Channel operator permissions for `#twisted`
 * Admin privileges for Twisted's PyPI packages
 * Contributor status for http://labs.twistedmatrix.com
 * Read The Docs access for the Twisted project

= Version numbers =

Twisted releases use a time-based numbering scheme. Releases versions like `YY.MM.mm`, where `YY` is the last two digits of the year of the release, `MM` is the number of the release in the year, and `mm` is the number of the patch release.

For example:
 * The first release of 2010 is `10.0.0`
 * The second release of 2010 is `10.1.0`
 * If 10.1.0 has some critical defects, then a patch release would be numbered `10.1.1`
 * The first pre-release of `10.0.0` is `10.0.0pre1`, the second is `10.0.0pre2`

Every release of Twisted includes the whole project, the core and all sub-projects. Each of these has the same number.

Throughout this document, we'll refer to the version number of the release as '''$RELEASE'''. Examples of $RELEASE include `10.0.0`, `10.1.0`, `10.1.1` etc.

We'll refer to the first two components of the release as '''$API''', since all releases that share those numbers are mutually API compatible. e.g. for `10.0.0`, `$API` is `10.0`; for `10.1.0` and `10.1.1`, `$API` is `10.1`.

The change-versions script automatically picks the right number for you. Please retrieve it after you run it.

= Overview =

To release Twisted, we
 1. Prepare for a release
 1. Release N pre-releases
 1. Release the final release

= Prepare for a release =

 1. Check the milestone for the upcoming release
    1. Get rid of any non-critical bugs
    1. Get any critical bugs fixed
    1. Check the [https://twistedmatrix.com/trac/wiki/ReleaseManagerNotes release manager notes] in case anyone has left anything which can only be done during the release.
 1. Check for any [http://twistedmatrix.com/trac/query?status=new&status=assigned&status=reopened&type=regression&order=priority regressions]
 1. Read through the `INSTALL` and `README` files to make sure things like the supported Python versions are correct
    1. Check the required Python version.
    1. Check that the list matches the current set of buildbots.
    1. Any mistakes should be fixed in trunk before making the release branch
 1. Choose a version number.
 1. File a ticket
    1. Assign it to the upcoming release milestone
    1. Assign it to yourself
    1. Call it "Release $RELEASE"
 1. Make a branch (`mkbranch release-$RELEASE-4290`, using mkbranch from twisted-dev-tools)


= How to do a pre-release =

 1. Check [http://buildbot.twistedmatrix.com/boxes-supported buildbot] to make sure all supported platforms are green (wait for pending builds if necessary).
 1. If a previously supported platform does not currently have a buildbot, move from supported platforms to "expected to work" in `INSTALL`. (Pending #1305)
 1. In your Git-SVN-enabled Git repo, fetch and check out the new release branch.
 1. Run `./bin/admin/change-versions --prerelease`
 1. Commit the changes made by `change-versions`
 1. Run `./bin/admin/build-news .`
 1. Commit the changes made by `build-news` - this automatically removes the NEWS topfiles (see #4315)
 1. Bump copyright dates in `LICENSE`, `twisted/copyright.py`, and `README` if required
 1. `git svn dcommit --dry` to make sure everything looks fine, and then `git svn dcommit` to push up the changes.
 1. Make a temporary directory for the tarballs to live in (e.g. `mkdir /tmp/twisted-release`)
 1. Run `./bin/admin/build-tarballs . /tmp/twisted-release/`
    1. ''Note'': `build-tarballs` does not produce exactly the same output when run multiple times, even when nothing else has changed.  If a problem is encountered that requires `build-tarballs` to be re-run (either during the pre-release or later during the release), care must be taken to avoid releasing two or more '''different''' versions of the tarball.
 1. Copy `NEWS` to `/tmp/twisted-release/` as `NEWS.txt` for people to view without having to download the tarballs.
    1. `cp NEWS /tmp/twisted-release/NEWS.txt`
 1. Upload the tarballs to `twistedmatrix.com/Releases/pre/$RELEASE` (see #4353)
    1. You can use `rsync --rsh=ssh --partial --progress -av /tmp/twisted-release/ t-web@dornkirk.twistedmatrix.com:/srv/t-web/data/releases/pre/<RELEASE>/` to do this.
 1. Write the pre-release announcement
    1. Read through the `NEWS` file and summarize the interesting changes for the release
    1. Get someone else to look over the announcement before doing it
 1. Announce the pre-release on
    1. the twisted-python [wiki:TwistedCommunity#MailLists mailing list]
    1. on IRC in the `#twisted` topic
    1. in a blog post, ideally `labs.twistedmatrix.com`

== Pre-release announcement ==

The pre-release announcement should mention the important changes since the last release, and exhort readers to test this pre-release.

Here's what the `$RELEASEpre1` release announcement might look like:

{{{
Live from PyCon Atlanta, I'm pleased to herald the approaching
footsteps of the $API release.

Tarballs for the first Twisted $RELEASE pre-release are now available at:
 http://people.canonical.com/~jml/Twisted/

Highlights include:

 * Improved documentation, including "Twisted Web in 60 seconds"

 * Faster Perspective Broker applications

 * A new Windows installer that ships without zope.interface

 * Twisted no longer supports Python 2.3

 * Over one hundred closed tickets

For more information, see the NEWS file.

Please download the tarballs and test them as much as possible.

Thanks,
jml
}}}

A week is a generally good length of time to wait before doing the final release.


= How to do a final release =

== Prepare the branch ==

 1. Have the release branch, previously used to generate a pre-release, checked out
 1. Run `./bin/admin/change-versions`
 1. Add the quote of the release to the README
 1. Make a new quote file for the next version: `svn cp docs/fun/Twisted.Quotes docs/historic/Quotes/Twisted-$API; echo '' > docs/fun/Twisted.Quotes`.
 1. Commit the version and README changes.
 1. Submit the ticket for review
 1. Pause until the ticket is reviewed and accepted.
 1. Tag the release
    * e.g. `svn cp svn+ssh://svn.twistedmatrix.com/svn/Twisted/branches/releases/release-$RELEASE-4290 svn+ssh://svn.twistedmatrix.com/svn/Twisted/tags/releases/twisted-$RELEASE`
    * A good commit message to use is something like "Tag $RELEASE release"

== Cut the tarballs & installers ==

 1. Create a new staging area for the release (e.g. `mkdir /tmp/twisted-release`)
 1. Using a checkout of the release branch or the release tag (with no local changes!), run `./bin/admin/build-tarballs . /tmp/twisted-release/`
 1. Build windows installers
    1. http://buildbot.twistedmatrix.com/builders/winxp32-py2.7-msi/
    1. http://buildbot.twistedmatrix.com/builders/windows7-64-py2.7-msi
    1. For "Branch" specify the release branch, e.g. "branches/releases/release-$RELEASE-4290"
    1. Download the latest `.msi`, `.exe` and `.whl` files from from http://buildbot.twistedmatrix.com/builds/twisted-packages/ and save them in the staging directory
 1. Sign the tarballs and Windows installers. (You will need a PGP key for this - use something like Seahorse to generate one, if you don't have one.)
    1. MD5: `md5sum Tw* | gpg -a --clearsign > /tmp/twisted-release/twisted-$RELEASE-md5sums.txt`
    1. SHA512: `shasum -a 512 Tw* | gpg -a --clearsign > /tmp/twisted-release/twisted-$RELEASE-shasums.txt`
    1. Compare these to an [http://tmrc.mit.edu/mirror/twisted/twisted-10.1.0-md5sums.txt example of twisted-$RELEASE-md5sums.txt] - they should look the same.

== Update documentation ==

 1. Get the dependencies
    * Pydoctor (use the branch "twisted" from [https://github.com/twisted/pydoctor])
    * Epydoc (`python-epydoc` in Debian)
 1. In another directory, export the version of Twisted being released
    * e.g. `svn export svn+ssh://svn.twistedmatrix.com/svn/Twisted/tags/releases/twisted-$RELEASE`
 1. Build the documentation
    1. `cd twisted-$RELEASE`
    1. `./bin/admin/build-docs .`
      * This doesn't seem to build the book?
    1. `cp -R doc /tmp/twisted-release/`
 1. Run the `build-apidocs` script to build the API docs (in an export of the release tag) and then upload them (See also [wiki:APIDocs] and #2891).
    1. Copy the `pydoctor` directory from the twisted branch into your export.
    1. `./bin/admin/build-apidocs . /tmp/twisted-release/api`
    1. Documentation will be generated in a directory called `/tmp/twisted-release/api`
 1. Update the Read The Docs default to point to the release branch (via the [dashboard https://readthedocs.org/projects/twisted/]).

== Distribute ==

 1. Create a tarball with the contents of the release directory: `cd /tmp/twisted-release; tar -cvjf ../release.tar.bz2 *`
 1. Upload to the official upload locations (see #2888)
    1. `cd ~; git clone https://github.com/twisted-infra/braid`
    1. `cd braid;`
    1. `virtualenv ~/dev/braid; source ~/dev/braid/bin/activate; cd ~/braid; python setup.py develop;`
    1. `cd ~/braid; fab config.production t-web.uploadRelease:$RELEASE,/tmp/release.tar.bz2`
 1. Test the generated docs
    1. Browse to http://twistedmatrix.com/documents/$RELEASE/
    1. Make sure that there is content in each of the directories and that it looks good
    1. Follow each link on  http://twistedmatrix.com/trac/wiki/Documentation, replace current with $RELEASE (e.g. 10.0.0) and look for any obvious breakage 
 1. Change the "current" symlink
    1. Upload release: `fab config.production t-web.updateCurrentDocumentation:$RELEASE`

== Announce ==

 1. Update [wiki:Downloads] pages
    1. The following updates are automatic, due to the use of the [https://raw.github.com/twisted-infra/twisted-trac-plugins/master/twisted_trac_plugins/release_macro.py ProjectVersion] [WikiMacros wiki macro] throughout most of the [wiki:Downloads] page.
      1. Text references to the old version to refer to the new version
      1. The link to the `NEWS` file to point to the new version
      1. Links and text to MSIs
      1. Links and text to the main tarball
      1. Links and text to sub tarballs, including links to news files
    1. Add a new md5sum link
    1. Add a new shasum link
    1. Save the page, check all links
 1. Update PyPI records & upload files
    * http://pypi.python.org/pypi/Twisted/
      * Edit the version. *Make sure you do this first.*
      * Upload tarball, MSIs and wheels
 1. Write the release announcement (see below)
 1. Update ReleaseRevisions with the revision of this release
   * The final revision of the release is the revision in which the release branch was made. The starting revision is the one immediately after the final revision of the previous release.
 1. Announce the release
    1. Send a text version of the announcement to: `twisted-python@twistedmatrix.com, python-announce-list@python.org, python-list@python.org, twisted-web@twistedmatrix.com, twisted-jabber@ik.nu`
      * Note: you need to be subscribed to some of those lists to be able to send, like `twisted-jabber@ik.nu`.
    1. http://labs.twistedmatrix.com
      * Post a web version of the announcements, with links instead of literal URLs
    1. Twitter, if you feel like it
    1. #twisted topic on IRC (you'll need ops)
 1. Merge the release branch into trunk, closing the release ticket at the same time.
    * For now you need to add a .misc NEWS fragment to merge the branch.
 1. Close the release milestone (which should have no tickets in it).
 1. Open a milestone for the next release.

== Release announcement ==

The final release announcement should:
 * Mention the version number
 * Include links to where the release can be downloaded
 * Summarize the significant changes in the release
 * Consider including the quote of the release
 * Thank the contributors to the release

Here's an example:

{{{
On behalf of Twisted Matrix Laboratories, I am honoured to announce
the release of Twisted 13.2!

The highlights of this release are:

 * Twisted now includes a HostnameEndpoint implementation which uses
IPv4 and IPv6 in parallel, speeding up the connection by using
whichever connects first (the 'Happy Eyeballs'/RFC 6555 algorithm).
(#4859)

 * Improved support for Cancellable Deferreds by kaizhang, our GSoC
student. (#4320, #6532, #6572, #6639)

 * Improved Twisted.Mail documentation by shira, our Outreach Program
for Women intern. (#6649, #6652)

 * twistd now waits for the application to start successfully before
exiting after daemonization. (#823)

 * SSL server endpoint string descriptions now support the
specification of chain certificates. (#6499)

 * Over 70 closed tickets since 13.1.0.

For more information, check the NEWS file (link provided below).

You can find the downloads at <https://pypi.python.org/pypi/Twisted>
(or alternatively <http://twistedmatrix.com/trac/wiki/Downloads>) .
The NEWS file is also available at
<http://twistedmatrix.com/Releases/Twisted/13.2/NEWS.txt>.

Many thanks to everyone who had a part in this release - the
supporters of the Twisted Software Foundation, the developers who
contributed code as well as documentation, and all the people building
great things with Twisted!

Twisted Regards,
HawkOwl
}}}


= When things go wrong =

If you discover a showstopper bug during the release process, you have three options.
 1. Abort the release, make a new point release (e.g. abort 10.0.0, make 10.0.1 after the bug is fixed)
 1. Abort the release, make a new pre-release (e.g. abort 10.0.0, make 10.0.0pre3 after the bug is fixed)
 1. Interrupt the release, fix the bug, then continue with it (e.g. release 10.0.0 with the bug fix)

If you choose the third option, then you should:
 1. Delete the tag for the release
 1. Recreate the tag from the release branch once the fix has been applied to that branch


= Bug fix releases =

Sometimes, bugs happen, and sometimes these are regressions in the current released version. This section goes over doing these "point" releases.

 1. Ensure all bugfixes are in trunk.
 1. Make a branch off the affected version.
    1. eg. {{{svn cp svn+ssh://svn.twistedmatrix.com/svn/Twisted/branches/releases/release-$API.0-7844  svn+ssh://svn.twistedmatrix.com/svn/Twisted/branches/releases/release-$API.1-7906 -m "Branching to $API.1"}}}
 1. Cherry-pick the merge commits that merge the bugfixes into trunk, onto the new release branch.
 1. Go through the rest of the process for a full release from "How to do a pre-release", merging the release branch into trunk as normal as the end of the process.
    1. Instead of {{{--prerelease}}} when running the change-versions script, add the patch flag, making it {{{--patch --prerelease}}}.
    1. Instead of waiting a week, a shorter pause is acceptable for a patch release.


= Open questions =

 * How do we manage the case where there are untested builds in trunk?
 * Should picking a release quote be part of the release or the pre-release?
 * What bugs should be considered release blockers?
   * Ultimately it's the RM's discretion
 * Should news fragments contain information about who made the changes?

= Bugs mentioned on this page =

 * [ticket:2888 Automate uploading tarballs to TMRC]
 * [ticket:4353 Automate uploading pre-release tarballs]
 * [ticket:4315 Convenience command for removing news fragments]
 * [ticket:2891 Automate building & uploading API docs for website]
 * [ticket:2380 Automate building & uploading howto docs for website]

= See also =

 * [http://twistedmatrix.com/trac/query?status=new&status=assigned&status=reopened&component=release+management&order=priority release management tickets]
 * [http://twistedmatrix.com/trac/query?status=new&status=assigned&status=reopened&milestone=regular-releases&order=priority regular-release tickets]
 * ReleaseAutomation
 * [http://doc.bazaar.canonical.com/bzr.dev/developers/releasing.html Releasing Bazaar] -- release documentation for another project that does time-based releases