This document describes the Twisted release process. Although it is still incomplete, every effort has been made to ensure that it is accurate and up-to-date. There are plans to eventually move this document into the source tree (#4543).

This process has only been tested on Linux, so we recommend that you do the release on Linux.

[[PageOutline]]

= Outcomes =

By the end of a Twisted release we'll have:
 * Tarballs for Twisted as a whole, and for each of its sub-projects
 * Windows installers for the whole Twisted project
 * Updated documentation (API, howtos & book) on the twistedmatrix.com site
 * Updated download links on the twistedmatrix.com site
 * Announcement emails sent to major Python lists
 * Announcement post on http://labs.twistedmatrix.com
 * A tag in our Subversion repository marking the release

= Prerequisites =

To release Twisted, you will need:
 * Commit privileges to Twisted
 * Shell access to cube.twistedmatrix.com
   * '''XXX:''' Possibly this ought to be permission to log in as `www-data`
 * Write permissions to /srv/www-data/twisted on cube (normally, www-data membership)
 * Write permissions to /srv/www-data/website/vhosts/twistedmatrix.com/documents
 * Permissions to edit WikiStart
 * Channel operator permissions for #twisted
 * Admin privileges for Twisted's PyPI packages
 * Membership of https://launchpad.net/~twisted-dev
 * Contributor status for http://labs.twistedmatrix.com

= Version numbers =

Twisted releases use a time-based numbering scheme. Releases versions like `YY.MM.mm`, where `YY` is the last two digits of the year of the release, `MM` is the number of the release in the year, and `mm` is the number of the patch release.

For example:
 * The first release of 2010 is 10.0.0
 * The second release of 2010 is 10.1.0
 * If 10.1.0 has some critical defects, then a patch release would be numbered 10.1.1
 * The first pre-release of 10.0.0 is 10.0.0pre1, the second is 10.0.0pre2

Every release of Twisted includes the whole project, the core and all sub-projects. Each of these has the same number.

Throughout this document, we'll refer to the version number of the release as '''$RELEASE'''. Examples of $RELEASE include 10.0.0, 10.1.0, 10.1.1 etc.

We'll refer to the first two components of the release as '''$API''', since all releases that share those numbers are mutually API compatible. e.g. for 10.0.0, $API is 10.0; for 10.1.0 and 10.1.1, $API is 10.1.

The change-versions script automatically picks the right number for you. Please retrieve it after you run it.

= Overview =

To release Twisted, we
 1. Prepare for a release
 1. Release N pre-releases
 1. Release the final release

= Prepare for a release =

 1. Check the milestone for the upcoming release
    1. Get rid of any non-critical bugs
    1. Get any critical bugs fixed
 1. Check for any [http://twistedmatrix.com/trac/query?status=new&status=assigned&status=reopened&type=regression&order=priority regressions]
 1. Read through the `INSTALL` and `README` files to make sure things like the supported Python versions are correct
    1. Check the required Python version.
    1. Check that the list matches the current set of buildbots.
    1. Any mistakes should be fixed in trunk before making the release branch
 1. Choose a version number. Remember to include the 'preN' suffix
 1. File a ticket
    1. Assign it to the upcoming release milestone
    1. Assign it to yourself
    1. Call it "Release $RELEASE"
 1. Make a branch (e.g. `mkbranch Twisted releases/release-$RELEASE-4290`)


= How to do a pre-release =

 1. Check [http://buildbot.twistedmatrix.com/boxes-supported buildbot] to make sure all supported platforms are green (wait for pending builds if necessary).
 1. If a previously supported platform does not currently have a buildbot, move from supported platforms to "expected to work" in `INSTALL`. (Pending #1305)
 1. Run `./bin/admin/change-versions --prerelease`
 1. Commit the changes made by `change-versions`
 1. Run `./bin/admin/build-news .`
 1. Commit the changes made by `build-news`
 1. ~~Delete the NEWS turds (see #4315)~~
 1. Bump copyright dates in `LICENSE`, `twisted/copyright.py`, and `README`
 1. Make a temporary directory for the tarballs to live in (e.g. `mkdir /tmp/twisted-release`)
 1. Run `./bin/admin/build-tarballs . /tmp/twisted-release/`
    1. ''Note'': `build-tarballs` does not produce exactly the same output when run multiple times, even when nothing else has changed.  If a problem is encountered that requires `build-tarballs` to be re-run (either during the pre-release or later during the release), care must be taken to avoid releasing two or more '''different''' versions of the tarball.
 1. Upload the tarballs to a public website (see #4353)
 1. Write the pre-release announcement
    1. Read through the `NEWS` file and summarize the interesting changes for the release
    1. Get someone else to look over the announcement before doing it
 1. Announce the pre-release on
    1. the twisted-python [wiki:TwistedCommunity#MailLists mailing list]
    1. on IRC in the `#twisted` topic
    1. in a blog post, ideally `labs.twistedmatrix.com`

== Pre-release announcement ==

The pre-release announcement should mention the important changes since the last release, and exhort readers to test this pre-release.

Here's what the $RELEASEpre1 release announcement might look like:

{{{
Live from PyCon Atlanta, I'm pleased to herald the approaching
footsteps of the $API release.

Tarballs for the first Twisted $RELEASE pre-release are now available at:
 http://people.canonical.com/~jml/Twisted/

Highlights include:

 * Improved documentation, including "Twisted Web in 60 seconds"

 * Faster Perspective Broker applications

 * A new Windows installer that ships without zope.interface

 * Twisted no longer supports Python 2.3

 * Over one hundred closed tickets

For more information, see the NEWS file.

Please download the tarballs and test them as much as possible.

Thanks,
jml
}}}


= How to do a final release =

== Prepare the branch ==

 1. Have the release branch, previously used to generate a pre-release, checked out
 1. Run `./bin/admin/change-versions`
 1. Add the quote of the release to the README
 1. Make a new quote file for the next version: `svn cp doc/fun/Twisted.Quotes doc/historic/Quotes/Twisted-$RELEASE; echo '' > doc/fun/Twisted.Quotes`.
 1. Commit the version and README changes.
 1. Submit the ticket for review
 1. Pause until the ticket is reviewed and accepted.
 1. Tag the release
    * e.g. `svn cp svn+ssh://svn.twistedmatrix.com/svn/Twisted/branches/releases/release-$RELEASE-4290 svn+ssh://svn.twistedmatrix.com/svn/Twisted/tags/releases/twisted-$RELEASE`
    * A good commit message to use is something like "Tag $RELEASE release"

== Cut the tarballs & installers ==

 1. Create a new staging area for the release (e.g. `mkdir /tmp/twisted-release`)
 1. Using a checkout of the release branch or the release tag (with no local changes!), run `./bin/admin/build-tarballs . /tmp/twisted-release/`
 1. Build windows installers
    1. ~~http://buildbot.twistedmatrix.com/builders/winxp32-py2.5-msi/~~
    1. ~~http://buildbot.twistedmatrix.com/builders/winxp32-py2.6-msi/~~
    1. http://buildbot.twistedmatrix.com/builders/winxp32-py2.7-msi/
    1. http://buildbot.twistedmatrix.com/builders/windows7-64-py2.7-msi
    1. For "Branch" specify the release branch, e.g. "branches/releases/release-$RELEASE-4290"
       1. ~~The builders use the bzr export, which doesn't mirror tags/ or branches/releases/. You may need to copy the branch elsewhere.~~
    1. Download the latest `.msi`, `.exe` and `.whl` files from from http://buildbot.twistedmatrix.com/builds/twisted-packages/ and save them in the staging directory
       1. ~~ The installers built from windows7-64-py2.7-msi will counter-intuitively have names that end in winxp32-py2.7.exe and winxp32-py2.7.msi. This is because of "distutils weirdness and other things".~~
 1. Sign the tarballs and Windows installers
    1. e.g. `md5sum Tw* | gpg -a --clearsign > twisted-$RELEASE-md5sums.txt`
    1. Compare this to an [http://tmrc.mit.edu/mirror/twisted/twisted-10.1.0-md5sums.txt example of twisted-$RELEASE-md5sums.txt]

== Distribute ==

 1. Upload to the official upload locations (see #2888)
    1. e.g. `ssh cube.twistedmatrix.com mkdir -m 2775 /srv/www-data/twisted/Releases/{Twisted,Core,Conch,Lore,Mail,Names,News,Pair,Runner,Web,Words}/$API`
    1. e.g. `scp /tmp/twisted-release/Twisted-$RELEASE.tar.bz2 cube.twistedmatrix.com:/srv/www-data/twisted/Releases/Twisted/$API/`
    1. For all subprojects, upload the tarballs to `cube.twistedmatrix.com:/srv/www-data/twisted/Releases/$SUBPROJECT/$API/`
    1. Windows installers (msi, exe and whl) go in the `Twisted` project
 1. Update the permissions on `cube`
    1. For all new directories, `chmod 2775 $DIRECTORY`
    1. For all new files, `chmod 664 $FILE`
    1. For all new files and directories, `chgrp www-data $FILE_OR_DIR`
    1. e.g. On cube, `find /srv/www-data/twisted/Releases -name '*$RELEASE*' | xargs chmod g+w`
 1. ~~Wait for the tarballs to be mirrored to http://tmrc.mit.edu/mirror/twisted/Twisted/~~
   * ~~They are mirrored 15 minutes after every hour~~
   * ~~You can ask foom on #twisted to force the mirror~~

== Update documentation ==

 1. Get the dependencies
    * Pydoctor (use [https://code.launchpad.net/~twisted-dev/pydoctor/twisted-templates-2 lp:~twisted-dev/pydoctor/twisted-templates-2] to get google analytics templates)
    * Nevow
    * Epydoc (`python-epydoc` in Debian)
    * Some version of Latex if you didn't use the Epydoc Debian/Ubuntu package or ignored the recommended packages
    * netpbm (graphics conversion tools used by the book-builder)
 1. Export the version of Twisted being released
    * e.g. `svn export svn+ssh://svn.twistedmatrix.com/svn/Twisted/tags/releases/twisted-$RELEASE`
 1. Create and run the unofficial `build-docs` script in an export of the release tag
    1. `cd twisted-$RELEASE`
    1. Create a {{{build-docs.py}}} script based on [ReleaseProcess#Buildhowtodocumentsforwebsite this template]. Be sure to read the notes at the top of that script.
      * '''XXX:''' The script builds the docs into the current directory, mixing them up with the source files.
    1. `python build-docs.py`
      * If you have latex errors when trying to build the book and retry, don't forget to clean tmp directories which may be leftover in `doc/core/howto`.
    1. `cp -R doc /tmp/twisted-release/`
    1. `cd /tmp/twisted-release/doc`
 1. Make the documentation directory on cube
    * e.g. `ssh cube.twistedmatrix.com mkdir -m 2775 ~www-data/distributable/documentation/$RELEASE`
 1. Upload the documents to cube
    * e.g. `scp -r doc/* cube.twistedmatrix.com:~www-data/distributable/documentation/$RELEASE`
 1. Run the `build-apidocs` script to build the API docs (in an export of the release tag) and then upload them (See also [wiki:APIDocs] and #2891)
    1. `./bin/admin/build-apidocs . ./api`
    1. Documentation will be generated in a directory called `./api`
    1. `tar -cjf apidocs.tar.bz2 api`
    1. `scp apidocs.tar.bz2 cube.twistedmatrix.com:.`
    1. On cube, `tar -xjf apidocs.tar.bz2`
    1. On cube, `mv apidocs ~www-data/distributable/documentation/$RELEASE/api`
 1. Copy the book
    * e.g. `scp book.pdf cube.twistedmatrix.com:~www-data/distributable/documentation/$RELEASE/core/howto`
 1. Update the permissions on cube
    1. `cd ~www-data/distributable/documentation/$RELEASE`
    1. `find . -type d | xargs chmod 2775`
    1. `find . -type f | xargs chmod 664`
    1. `chgrp -R www-data .`
 1. Test the generated docs
    1. Browse to `http://twistedmatrix.com/documents/$RELEASE/`
    1. Make sure that there is content in each of the directories and that it looks good
    1. Follow each link on http://twistedmatrix.com/trac/wiki/Documentation, replace `current` with $RELEASE (e.g. `10.0.0`) and look for any obvious breakage
 1. Change the "current" symlink
    1. On cube `cd ~www-data/distributable/documentation`
    1. On cube, `rm current`
    1. On cube, `ln -s $RELEASE current`


== Synchronize Trac ==

 1. The site uses the [WikiMacros#AvailableMacros ProjectVersion] macro to automatically adjust the links on the wiki pages, including [wiki:WikiStart] and [wiki:Downloads], by parsing the latest `twisted-$RELEASE-md5sums.txt`:
    1. `scp twisted-$RELEASE-md5sums.txt cube.twistedmatrix.com:/srv/www-data/twisted/Releases/`


== Announce ==

 1. Update [wiki:Downloads] pages
    1. The following steps are automatic, due to the use of the [http://bazaar.launchpad.net/~exarkun/twisted-trac-integration/trunk/view/head:/trac-plugins/twisted_release_macro.py ProjectVersion] [WikiMacros wiki macro] throughout most of the [wiki:Downloads] page
      1. Change text references to the old version to refer to the new version
      1. Update the link to the NEWS file to point to the new version
      1. Update links and text to MSIs
      1. Update links and text to the main tarball
      1. Update links and text to sub tarballs, including links to news files
    1. Add a new md5sum link
    1. Save the page, check all links
 1. Update PyPI records & upload files
    * http://pypi.python.org/pypi/Twisted/
      * Edit the version
      * Upload tarball, MSIs and wheels
 1. Update PyPI records, editing the version  
    * http://pypi.python.org/pypi/Twisted%20Pair/
    * http://pypi.python.org/pypi/Twisted%20Conch/
    * http://pypi.python.org/pypi/Twisted%20Core/
    * http://pypi.python.org/pypi/Twisted%20Lore/
    * http://pypi.python.org/pypi/Twisted%20Mail/
    * http://pypi.python.org/pypi/Twisted%20Names/
    * http://pypi.python.org/pypi/Twisted%20News/
    * http://pypi.python.org/pypi/Twisted%20Runner/
    * http://pypi.python.org/pypi/Twisted%20Web/
    * http://pypi.python.org/pypi/Twisted%20Words/
 1. ~~Update WikiStart~~
 1. Write the release announcement (see below)
 1. Update ReleaseRevisions with the revision of this release
   * The final revision of the release is the revision in which the release branch was made. The starting revision is the one immediately after the final revision of the previous release.
 1. Announce the release
    1. Send a text version of the announcement to: `twisted-python@twistedmatrix.com, python-announce-list@python.org, python-list@python.org, twisted-web@twistedmatrix.com, twisted-jabber@ik.nu`
      * Note: you need to be subscribed to some of those lists to be able to send, like twisted-jabber@ik.nu.
    1. Launchpad;
      * https://launchpad.net/twisted/main/+addrelease
        * Include a text version of the announcement and the new entries of the NEWS file
      * https://launchpad.net/twisted/+announcements
    1. http://labs.twistedmatrix.com
      * Post a web version of the announcements, with links instead of literal URLs
    1. Twitter, if you feel like it
    1. #twisted topic on IRC (you'll need ops)
 1. Merge the release branch into trunk, closing the release ticket at the same time.
    * For now you need to add a .misc NEWS fragment to merge the branch.
 1. Close the release milestone (which should have no tickets in it).
 1. Open a milestone for the next release.

== Release announcement ==

The final release announcement should:
 * Mention the version number
 * Include links to the release tarballs & Windows installers (both msi & exe)
 * Summarize the significant changes in the release
 * Consider including the quote of the release
 * Thank the contributors to the release

Here's an example:

{{{
On behalf of Twisted Matrix Laboratories, I am honored to announce the
release of Twisted $RELEASE.

Highlights include:

 * Improved documentation, including "Twisted Web in 60 seconds"

 * Faster Perspective Broker applications

 * A new Windows installer that ships without zope.interface

 * Twisted no longer supports Python 2.3

 * Over one hundred closed tickets

For more information, see the NEWS file.

It's stable, backwards compatible, well tested and in every way an
improvement. Download it now from:

 http://tmrc.mit.edu/mirror/twisted/Twisted/$API/Twisted-$RELEASE.tar.bz2 or
 http://tmrc.mit.edu/mirror/twisted/Twisted/$API/Twisted-$RELEASE.win32-py2.5.msi or
 http://tmrc.mit.edu/mirror/twisted/Twisted/$API/Twisted-$RELEASE.win32-py2.6.msi

Many thanks to Jean-Paul Calderone and Chris Armstrong, whose work on
release automation tools and answers to numerous questions made this
possible. Thanks also to the supporters of the Twisted Software
Foundation and to the many contributors for this release.

jml
}}}


= When things go wrong =

If you discover a showstopper bug during the release process, you have three options.
 1. Abort the release, make a new point release (e.g. abort 10.0.0, make 10.0.1 after the bug is fixed)
 1. Abort the release, make a new pre-release (e.g. abort 10.0.0, make 10.0.0pre3 after the bug is fixed)
 1. Interrupt the release, fix the bug, then continue with it (e.g. release 10.0.0 with the bug fix)

If you choose the third option, then you should:
 1. Delete the tag for the release
 1. Recreate the tag from the release branch once the fix has been applied to that branch


= Examples =

== Build howto documents for website ==

See #2380.

{{{
#!python
from twisted.python import _release as r
from twisted.python.filepath import FilePath

# Make sure to replace the following in this script:
# - the instances of $RELEASE with the version number (eg. `11.0.0`)
# - download http://bazaar.launchpad.net/~twisted-dev/twisted-website/trunk/view/head:/docs/website-template.tpl
#   somewhere and update the instance of '/path/to/website-template.tpl' accordingly

done = {}
for p in FilePath('doc').walk():
    if p.basename() == 'man':
        print 'processing manual pages:', p.path
        done[p] = True
        r.ManBuilder().build(p)

for p in FilePath('doc').walk():
    if p.basename().endswith('.xhtml'):
        if p.parent() not in done:
            print 'processing howto pages:', p.parent().path
            done[p.parent()] = True
            r.DocBuilder().build(
                '$RELEASE', FilePath('doc/core/howto'), p.parent(),
                FilePath('/path/to/website-template.tpl'),
                'http://twistedmatrix.com/documents/$RELEASE/api/%s.html',
                False)

print 'building book:'
for p in done:
    print '	', p.path
r.BookBuilder().build(FilePath('doc/core/howto'), done.keys(),
                      FilePath('doc/core/howto/book.tex'),
                      FilePath('book.pdf'))
}}}


= Open questions =

 * How do we manage the case where there are untested builds in trunk?
 * Should picking a release quote be part of the release or the pre-release?
 * What bugs should be considered release blockers?
   * Ultimately it's the RM's discretion
 * Should news fragments contain information about who made the changes?
 * A thought for future releases: since we'd really like folks to download the prereleases and try them out, perhaps we should put the [source:trunk/NEWS NEWS] file on the web somewhere official, too, so they can see all the cool stuff they can try out?
   * '''XXX:''' jml doesn't know what this means any more

= Bugs mentioned on this page =

 * [ticket:2888 Automate uploading tarballs to TMRC]
 * [ticket:4353 Automate uploading pre-release tarballs]
 * [ticket:4315 Convenience command for removing news fragments]
 * [ticket:2891 Automate building & uploading API docs for website]
 * [ticket:2380 Automate building & uploading howto docs for website]
 * [ticket:4544 Lore applies quoting to contents of script tags]
 * [ticket:4545 Lore collapses script tags]

= See also =

 * [http://twistedmatrix.com/trac/query?status=new&status=assigned&status=reopened&component=release+management&order=priority release management tickets]
 * [http://twistedmatrix.com/trac/query?status=new&status=assigned&status=reopened&milestone=regular-releases&order=priority regular-release tickets]
 * ReleaseAutomation
 * [http://doc.bazaar.canonical.com/bzr.dev/developers/releasing.html Releasing Bazaar] -- release documentation for another project that does time-based releases