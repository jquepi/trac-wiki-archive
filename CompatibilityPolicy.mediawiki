[wiki:ContributingToTwistedLabs Contribute] > [wiki:TwistedDevelopment Development] > Compatibility Policy

= Compatibility Policy =

NB: This is a work in progress.

[[PageOutline(2-4,, inline)]]

== Motivation ==

The Twisted project has a small development team, and we cannot afford to provide anything but critical bug-fix support for multiple version branches of Twisted.  However, we all want Twisted to provide a positive experience during development, deployment, and usage.  Therefore we need to provide the most trouble-free upgrade process possible, so that Twisted application developers will not shy away from upgrades that include necessary bugfixes and feature enhancements.

Twisted is used by a wide variety of applications, many of which are proprietary or otherwise inaccessible to the Twisted development team.  Each of these applications is developed against a particular version of Twisted.  Python does not provide us with a strict way to partition "public" and "private" objects (methods, classes, modules), so it is unfortunately quite likely that many of those applications are using arbitrary parts of Twisted.  Our compatibility strategy needs to take this into account, and be comprehensive across our entire codebase.  Exceptions can be made for modules aggressively marked "unstable" or "experimental", but even experimental modules will start being used in production code if they have been around for long enough.

The purpose of this document is to to lay out rules for Twisted application developers who wish to weather the changes when Twisted upgrades, and procedures for Twisted engine developers - both contributors and core team members - to follow when who want to make changes which may be incompatible to Twisted itself.

== Defining Compatibility ==

The word "compatibility" is itself difficult to define.  While comprehensive compatibility is good, ''total'' compatibility is neither feasible nor desirable.  Total compatibility requires that nothing ever change, since any change to Python code is detectable by a sufficiently determined program.  There is some folk knowledge around which kind of changes "obviously" won't break other programs, but this knowledge is spotty and inconsistent.  Rather than attempt to disallow specific kinds of changes, here we will lay out a list of changes which are considered compatible.

Throughout this document, "compatible" changes are those which meet these specific criteria.  Although a change may be broadly considered backward compatible, as long as it does not meet this official standard, it will be officially deemed "incompatible" and put through the process for incompatible changes.

=== Non-Incompatibilties ===

  * test changes.  No code in a test package should be imported by a non-test package within Twisted, so there's no chance anything could access these objects by going through the public API.
  * "private" changes.  Code is considered "private" if the user would have to type a leading underscore to access it.  In other words, a function, module, method, attribute or class whose name begins with an underscore may be arbitrarily changed, ''unless'':
    * a "public" entry point returns a "private" object, that "private" object must preserve its "public" attributes.  For example:
{{{
#!py
class _y:
    def z(self): return 1
    def _q(self): return 2
def x(): return _y()
}}}
      in this example, `_y` can no longer be arbitrarily changed.  Specifically, 'z' is now a public method, thanks to 'x' exposing it.  However, '_q' can still be arbitrarily changed or removed.
    * a "private" class is exposed by way of a "public" subclass.  For example,
{{{
#!py
class _a:
    def b(self): return 1
    def c(self): return 2
class d(_a): pass
}}}
      in this example `_a` is effectively public, since 'b' and 'c' are both exposed via `d`.
  * Source
    * The most basic thing that can happen between Twisted versions, of course, is that the code may change.  That means that no application may ever rely on, for example, the value of any {{{func_code}}} object's {{{co_code}}} attribute remaining stable, or the checksum of a .py file remaining stable.
    * Docstrings may also change at any time.  No application code may expect any Twisted class, module, or method's {{{__doc__}}} attribute to remain the same.
  * Attributes: New code may also be added.  No application may ever rely on the output of the 'dir' function on any object remaining stable, nor on any object's {{{__all__}}} attribute, nor on any object's {{{__dict__}}} not having new keys added to it.  These may happen in any maintenance or bugfix release, no matter how minor.
  * Pickling: Even though Python objects can be pickled and unpickled without explicit support for this, whether a particular pickled object can be unpickled after any particular change to the implementation of that object is less certain.  Because of this, no application may depend on any object defined by Twisted to provide pickle compatibility between any release unless the object explicitly documents this as a feature it has.

==== Fixing Gross Violation of Specifications ====

If Twisted documents an object as complying with a published specification, and there are inputs which can cause Twisted to behave in obvious violation of that specification, then changes may be made to correct the behavior in the face of those inputs.  If application code must support multiple versions of Twisted, and work around violations of such specifications, then it ''must'' test for the presence of such a bug before compensating for it.

For example, Twisted supplies a DOM implementation in {{{twisted.web.microdom}}}.  If an issue were discovered where parsing the string {{{<xml>Hello</xml>}}} and then serializing it again resulted in {{{>xml<Hello>/xml<}}}, that would grossly violate the XML specification for well-formedness.  Such code could be fixed with no warning other than release notes detailing that this error is now fixed.

However, if even such a gross violation were documented, or fixing it caused existing tests to break, then the change should be considered incompatible, regardless of how gross its violation.  It may be that such violations are introduced specifically to deal with other grossly non-compliant implementations of said specification.  If it is determined that those reasons are invalid or ought to be exposed through a different API, the change is compatible.

=== Explicitly Incompatible Changes ===

Some changes appear to be in keeping with the above rules describing what is compatible, but are in fact not.

==== Interface Changes ====

Although methods may be added to implementations, adding those methods to interfaces may introduce an unexpected requirement in user code.

[XXX TODO]: There is currently no way to express, in {{{zope.interface}}}, that an interface may optionally provide certain features which need to be tested for.  Although we can add new code, we can't add new requirements on user code to implement new methods.

This is easier to deal with in a system which uses abstract base classes because new requirements can provide default implementations which provide warnings.  Something could also be put in place to do the same with interfaces, since they already install a metaclass, but this is tricky territory.  The only example I'm aware of here is the Microsoft tradition of {{{ISomeInterfaceN}}} where N is a monotonically ascending number for each release.

== Procedure for Incompatible Changes ==

=== The First One's Always Free ===

The general purpose of this document is to provide a pleasant upgrade experience for Twisted application developers and users.  The specific purpose of this procedure is to achieve that experience by making sure that any application which runs without warnings may be upgraded one minor version of twisted (y to y+1 in x.y.z) or from the last minor revision of a major release to the first minor revision of the next major release (x to x + 1 in x.y.z to x.0.z, when there will be no x.y+1.z).  In other words, any application which runs its tests without triggering any warnings from Twisted ''should'' be able to have its Twisted version upgraded at least once with no ill effects except the possible production of new warnings.

=== Compatible Changes ===

Any change specifically described as "compatible" above may be made at any time, in any release.

=== Incompatible Changes ===

Any change which is ''not'' specifically described as "compatible" must be made in 3 phases.  If a change is made in release R, the timeline is:

  1. Release R:
    * New functionality is added.
    * Old functionality is deprecated with a {{{DeprecationWarning}}}.
  1. ''At the earliest'', release R+2 and one year after release R, but often ''much later'':
    * Old functionality is completely removed.

Removal should happen once the deprecated API becomes an additional maintenance burden.  For example, if it makes implementation of a new feature more difficult, if it makes documentation of non-deprecated APIs more confusing, or if its unit tests become an undue burden on the continuous integration system.  Removal should not be undertaken just to follow a timeline.  Twisted should strive, as much as practical, not to break applications relying on it.

=== Procedure for Exceptions to this Policy ===

Every change is unique.  Sometimes, we'll want to make a change that fits with this spirit of this document (keeping Twisted working for applications which rely upon it) but may not fit with the letter of the procedure described above (the change modifies behavior of an existing API sufficiently that something ''might'' break).  Generally, the reason that one would want to do this is to give applications a performance enhancement or bug fix that ''could'' break behavior that  unanticipated, hypothetical uses of an existing API, but we don't want well-behaved applications to pay the penalty of a deprecation/adopt-a-new-API/removal cycle in order to get the benefits of the improvement if they don't need to.

If this is the case for your change, it's possible to make such a modification without a deprecation/removal cycle.  However, we must give users an opportunity to discover whether a particular incompatible change affects them: we should not trust our own assessments of how code uses the API.  In order to propose an incompatible change, start a discussion on the mailing list.  Make sure that it is eye-catching so those who don't read all list messages in depth will notice it, by prefixing the subject with "INCOMPATIBLE CHANGE:" (capitalized like so).  Always include a link to the ticket, and branch (if relevant).

In order to '''conclude''' such a discussion, there must be a branch available so that developers can run their unit tests against it to mechanically verify that their understanding of their own code is correct.  If nobody can produce a failing test or broken application within a week's time from such a branch being both 1. available and 2. announced, and at least three committers agree that the change is worthwhile, then the branch can be considered approved for the incompatible change in question.  (Since some codebases that use Twisted are presumably proprietary and confidential, there should be a good-faith presumption if someone says they have broken tests but cannot immediately produce code to share.)  The branch must be available for one week's time.

(The announcement forum for incompatible changes and the waiting period required are subject to change as we discover how effective this method is; the important aspect of this policy is that users have some way of finding out in advance about changes which might affect them.)

== Application Developer Upgrade Procedure ==

When an application wants to be upgraded to a new version of Twisted, it can do so immediately.  However, if the application wants to get the same "for free" behavior for the next upgrade, the application's tests should be run treating warnings as errors, and fixed.

== Supporting and de-supporting Python versions ==

Twisted does not have a formal policy around supporting new versions of Python or de-supporting old versions of Python. We strive to support Twisted on any version of Python that is the default Python for a vendor-supported release from a major platform, namely Debian, Ubuntu, the latest release of Windows, or the latest release of OS X. The versions of Python currently supported are listed in the [http://twistedmatrix.com/trac/browser/trunk/INSTALL INSTALL] file for each release.

A distribution release + Python version is only considered supported when a [http://buildbot.twistedmatrix.com/ buildslave] exists for it.

Removing support for a Python version will be announced at least 1 release prior to the removal.

=== Implied New APIs ===

{{{DeprecationError}}} does not currently exist and would need to be introduced.

~~Trial has support for suppressing warnings, but not for asserting about them.  That means it is not really feasible to verify that deprecations have been done correctly, although it is possible to quash them.~~ ''(trial now provides TestCase.~~assertWarns~~flushWarnings)''

Trial also needs a way to do the equivalent of {{{-Werror}}} that was specific to Twisted warnings, since it may not be possible to avoid certain kinds of warning while remaining compatible between all Python versions.

=== How to deprecate APIs ===

==== Functions and methods ====

To deprecate a free function or a method, add a call to `warnings.warn` to the beginning of the implementation of that method.  The warning should be of type `PendingDeprecationWarning` or `DeprecationWarning` and the stack level should be set so that the warning refers to the code which is invoking the deprecated function or method.  For example:

{{{
#!python
def foo(bar):
    warnings.warn("foo is deprecated since Twisted 1.2.  Use baz instead.", category=DeprecationWarning, stacklevel=2)
    return bar * 3
}}}

The deprecation message must include the name of the function which is deprecated, the version of Twisted in which it was first deprecated, and a suggestion for a replacement (if the API provides functionality which it is determined is beyond the scope of Twisted, then it may be deprecated without a replacement).

==== Instance attributes ====

To deprecate an attribute on instances of a class, make the attribute into a property and call `warnings.warn` from the getter and/or setter function for that property.

==== Module attributes ====

Modules cannot have properties, so module attributes should be deprecated using `twisted.python.deprecate.deprecatedModuleAttribute`.

==== Modules ====

To deprecate an entire module, `twisted.python.deprecate.deprecatedModuleAttribute` can be used on the parent package's `__init__.py`.  There are two other options:

    * put a `warnings.warn()` call into the top-level code of the module
    * deprecate all of the attributes of the module

==== Unit testing ====

Like all changes in Twisted, deprecations must be unit tested.  There are several options for this.  In order of decreasing preference:

    * [//documents/current/api/twisted.trial.unittest.SynchronousTestCase.html#flushWarnings `twisted.trial.unittest.TestCase.flushWarnings`]
    * [//documents/current/api/twisted.trial._synctest._Assertions.html#assertWarns `twisted.trial.unittest.TestCase.assertWarns`]
    * [//documents/current/api/twisted.trial.unittest.SynchronousTestCase.html#callDeprecated `twisted.trial.unittest.TestCase.callDeprecated`]

=== Weaknesses of the Warnings System ===

~~Warnings are, for a variety of unfortunate reasons, often displayed to end-users before they are displayed to developers.  There should be some mechanism for specifying what warnings one wants to see and how they should be reported.  For example, if Twisted continues to have some warnings against a particular version of Python, a Twisted application developer doesn't necessarily care.  They should be able to declare that they are a developer for particular packages and see warnings only for those packages.~~ ''(as of Python 2.7, `DeprecationWarning` will not be emitted by default)''

== Open Issues ==

=== Warnings Currently in Twisted ===

Taken from a recent test run:

{{{
/usr/lib/pymodules/python2.6/gtk-2.0/gtk/__init__.py:57: GtkWarning: could not open display
/usr/lib/python2.6/dist-packages/nevow/guard.py:15: DeprecationWarning: the md5 module is deprecated; use hashlib instead
/var/lib/buildbot/bot-glyph-1/ubuntu64-py2.6-epoll/Twisted/twisted/conch/test/test_helper.py:580: DeprecationWarning: twisted.conch.insults.helper.CharacterAttribute was deprecated in Twisted 13.1.0: Use twisted.conch.insults.text.assembleFormattedText instead.
/var/lib/buildbot/bot-glyph-1/ubuntu64-py2.6-epoll/Twisted/twisted/conch/test/test_helper.py:581: DeprecationWarning: twisted.conch.insults.helper.CharacterAttribute was deprecated in Twisted 13.1.0: Use twisted.conch.insults.text.assembleFormattedText instead.
/var/lib/buildbot/bot-glyph-1/ubuntu64-py2.6-epoll/Twisted/twisted/conch/test/test_helper.py:584: DeprecationWarning: twisted.conch.insults.helper.CharacterAttribute was deprecated in Twisted 13.1.0: Use twisted.conch.insults.text.assembleFormattedText instead.
/var/lib/buildbot/bot-glyph-1/ubuntu64-py2.6-epoll/Twisted/twisted/conch/test/test_helper.py:587: DeprecationWarning: twisted.conch.insults.helper.CharacterAttribute was deprecated in Twisted 13.1.0: Use twisted.conch.insults.text.assembleFormattedText instead.
/var/lib/buildbot/bot-glyph-1/ubuntu64-py2.6-epoll/Twisted/twisted/conch/test/test_helper.py:592: DeprecationWarning: twisted.conch.insults.helper.CharacterAttribute was deprecated in Twisted 13.1.0: Use twisted.conch.insults.text.assembleFormattedText instead.
/var/lib/buildbot/bot-glyph-1/ubuntu64-py2.6-epoll/Twisted/twisted/conch/test/test_helper.py:593: DeprecationWarning: twisted.conch.insults.helper.CharacterAttribute was deprecated in Twisted 13.1.0: Use twisted.conch.insults.text.assembleFormattedText instead.
/var/lib/buildbot/bot-glyph-1/ubuntu64-py2.6-epoll/Twisted/twisted/conch/test/test_helper.py:596: DeprecationWarning: twisted.conch.insults.helper.CharacterAttribute was deprecated in Twisted 13.1.0: Use twisted.conch.insults.text.assembleFormattedText instead.
/var/lib/buildbot/bot-glyph-1/ubuntu64-py2.6-epoll/Twisted/twisted/conch/test/test_helper.py:597: DeprecationWarning: twisted.conch.insults.helper.CharacterAttribute was deprecated in Twisted 13.1.0: Use twisted.conch.insults.text.assembleFormattedText instead.
/var/lib/buildbot/bot-glyph-1/ubuntu64-py2.6-epoll/Twisted/twisted/test/test_application.py:528: DeprecationWarning: twisted.application.internet.UDPClient was deprecated in Twisted 13.1.0: It relies upon IReactorUDP.connectUDP which was removed in Twisted 10. Use twisted.application.internet.UDPServer instead.
/var/lib/buildbot/bot-glyph-1/ubuntu64-py2.6-epoll/Twisted/twisted/web/test/test_http.py:1171: DeprecationWarning: twisted.web.http.Request.headers was deprecated in Twisted 13.2.0: Please use twisted.web.http.Request.responseHeaders instead.
/var/lib/buildbot/bot-glyph-1/ubuntu64-py2.6-epoll/Twisted/twisted/web/test/test_http.py:1171: DeprecationWarning: twisted.web.http.Request.received_headers was deprecated in Twisted 13.2.0: Please use twisted.web.http.Request.requestHeaders instead.
/var/lib/buildbot/bot-glyph-1/ubuntu64-py2.6-epoll/Twisted/twisted/conch/test/test_helper.py:576: DeprecationWarning: twisted.conch.insults.helper.CharacterAttribute was deprecated in Twisted 13.1.0: Use twisted.conch.insults.text.assembleFormattedText instead.
/var/lib/buildbot/bot-glyph-1/ubuntu64-py2.6-epoll/Twisted/twisted/conch/test/test_helper.py:577: DeprecationWarning: twisted.conch.insults.helper.CharacterAttribute was deprecated in Twisted 13.1.0: Use twisted.conch.insults.text.assembleFormattedText instead.
/var/lib/buildbot/bot-glyph-1/ubuntu64-py2.6-epoll/Twisted/twisted/conch/test/test_text.py:146: DeprecationWarning: twisted.conch.insults.text.flatten was deprecated in Twisted 13.1.0: Use twisted.conch.insults.text.assembleFormattedText instead.
/var/lib/buildbot/bot-glyph-1/ubuntu64-py2.6-epoll/Twisted/twisted/conch/test/test_text.py:154: DeprecationWarning: twisted.conch.insults.text.flatten was deprecated in Twisted 13.1.0: Use twisted.conch.insults.text.assembleFormattedText instead.
/usr/lib/python2.6/dist-packages/formless/annotate.py:730: DeprecationWarning: object.__new__() takes no parameters
/usr/lib/python2.6/dist-packages/nevow/testutil.py:7: DeprecationWarning: The popen2 module is deprecated.  Use the subprocess module.
/var/lib/buildbot/bot-glyph-1/ubuntu64-py2.6-epoll/Twisted/twisted/test/test_application.py:523: DeprecationWarning: twisted.application.internet.UDPClient was deprecated in Twisted 13.1.0: It relies upon IReactorUDP.connectUDP which was removed in Twisted 10. Use twisted.application.internet.UDPServer instead.
/var/lib/buildbot/bot-glyph-1/ubuntu64-py2.6-epoll/Twisted/twisted/test/test_application.py:524: DeprecationWarning: twisted.application.internet.UDPClient was deprecated in Twisted 13.1.0: It relies upon IReactorUDP.connectUDP which was removed in Twisted 10. Use twisted.application.internet.UDPServer instead.
/var/lib/buildbot/bot-glyph-1/ubuntu64-py2.6-epoll/Twisted/twisted/test/test_application.py:540: DeprecationWarning: twisted.application.internet.UDPClient was deprecated in Twisted 13.1.0: It relies upon IReactorUDP.connectUDP which was removed in Twisted 10. Use twisted.application.internet.UDPServer instead.
/var/lib/buildbot/bot-glyph-1/ubuntu64-py2.6-epoll/Twisted/twisted/test/test_ftp.py:942: DeprecationWarning: BaseException.message has been deprecated as of Python 2.6
/var/lib/buildbot/bot-glyph-1/ubuntu64-py2.6-epoll/Twisted/twisted/test/test_ftp.py:942: DeprecationWarning: BaseException.message has been deprecated as of Python 2.6
/var/lib/buildbot/bot-glyph-1/ubuntu64-py2.6-epoll/Twisted/twisted/test/test_log.py:604: UserWarning: hello!
/var/lib/buildbot/bot-glyph-1/ubuntu64-py2.6-epoll/Twisted/twisted/test/test_strports.py:24: DeprecationWarning: twisted.application.strports.parse was deprecated in Twisted 10.2.0: in favor of twisted.internet.endpoints.serverFromString
/var/lib/buildbot/bot-glyph-1/ubuntu64-py2.6-epoll/Twisted/twisted/scripts/trial.py:360: RuntimeWarning: Module 'smtplib' already imported, disabling anyway.
/var/lib/buildbot/bot-glyph-1/ubuntu64-py2.6-epoll/Twisted/twisted/scripts/trial.py:360: RuntimeWarning: Module 'smtplib' already imported, disabling anyway.
/var/lib/buildbot/bot-glyph-1/ubuntu64-py2.6-epoll/Twisted/twisted/web/test/test_http.py:1165: DeprecationWarning: twisted.web.http.Request.headers was deprecated in Twisted 13.2.0: Please use twisted.web.http.Request.responseHeaders instead.
/var/lib/buildbot/bot-glyph-1/ubuntu64-py2.6-epoll/Twisted/twisted/web/test/test_http.py:1166: DeprecationWarning: twisted.web.http.Request.headers was deprecated in Twisted 13.2.0: Please use twisted.web.http.Request.responseHeaders instead.
/var/lib/buildbot/bot-glyph-1/ubuntu64-py2.6-epoll/Twisted/twisted/web/test/test_http.py:1165: DeprecationWarning: twisted.web.http.Request.received_headers was deprecated in Twisted 13.2.0: Please use twisted.web.http.Request.requestHeaders instead.
/var/lib/buildbot/bot-glyph-1/ubuntu64-py2.6-epoll/Twisted/twisted/web/test/test_http.py:1166: DeprecationWarning: twisted.web.http.Request.received_headers was deprecated in Twisted 13.2.0: Please use twisted.web.http.Request.requestHeaders instead.
/var/lib/buildbot/bot-glyph-1/ubuntu64-py2.6-epoll/Twisted/twisted/web/test/test_tap.py:144: DeprecationWarning: twisted.application.strports.parse was deprecated in Twisted 10.2.0: in favor of twisted.internet.endpoints.serverFromString
/var/lib/buildbot/bot-glyph-1/ubuntu64-py2.6-epoll/Twisted/twisted/web/test/test_tap.py:160: DeprecationWarning: twisted.application.strports.parse was deprecated in Twisted 10.2.0: in favor of twisted.internet.endpoints.serverFromString
/usr/lib/python2.6/dist-packages/zope/interface/verify.py:57: DeprecationWarning: twisted.web.http.Request.received_headers was deprecated in Twisted 13.2.0: Please use twisted.web.http.Request.requestHeaders instead.
/usr/lib/python2.6/dist-packages/zope/interface/verify.py:57: DeprecationWarning: twisted.web.http.Request.headers was deprecated in Twisted 13.2.0: Please use twisted.web.http.Request.responseHeaders instead.
}}}

That's [https://buildbot.twistedmatrix.com/builders/natty64-py2.6-epoll/builds/3458/steps/epoll/logs/warnings 36 warnings on Python 2.6, with the epoll reactor], arguably our best-supported test configuration.  These warnings need to be eliminated so that application developers can treat warnings as errors.
